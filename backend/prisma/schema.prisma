// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  passwordResetToken  String?
  passwordResetExpires DateTime?

  // Relations (for future use)
  stores     ShopifyStore[]
  campaigns  Campaign[]
  brandVoice BrandVoice?
  passwordResetAudits PasswordResetAudit[]

  @@map("users")
}

model ShopifyStore {
  id          String   @id @default(uuid())
  userId      String
  shopDomain  String   @unique
  accessToken String
  scope       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns Campaign[]

  @@map("shopify_stores")
}

model Campaign {
  id          String    @id @default(uuid())
  userId      String
  storeId     String?
  name        String
  description String?
  goal        String? // welcome, re-engage, upsell, milestone, etc.
  status      String    @default("draft") // draft, active, paused, completed
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  store    ShopifyStore? @relation(fields: [storeId], references: [id], onDelete: SetNull)
  triggers Trigger[]
  emails   Email[]

  @@map("campaigns")
}

model Trigger {
  id         String   @id @default(uuid())
  campaignId String
  name       String?
  type       String // signup, no_activity, first_purchase, abandoned_cart, etc.
  delay      Int      @default(0) // Delay in minutes
  conditions String? // Additional conditions as JSON string
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("triggers")
}

model BrandVoice {
  id                  String   @id @default(uuid())
  userId              String   @unique
  businessName        String?
  businessDescription String?
  tone                String? // warm, professional, playful, friendly, etc.
  values              String? // JSON array of key values
  talkingPoints       String? // JSON array of USPs, policies, etc.
  dosDonts            String? // JSON object with do's and don'ts
  exampleCopy         String? // Example of their best communication
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("brand_voice")
}

model Email {
  id             String    @id @default(uuid())
  campaignId     String
  recipientEmail String
  recipientName  String?
  subject        String
  body           String
  aiGenerated    Boolean   @default(true)
  status         String    @default("pending") // pending, sent, failed, delivered, opened, clicked
  sentAt         DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  errorMessage   String?
  metadata       String? // Additional data as JSON string (customer context, AI prompt used, etc.)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("emails")
}

model PasswordResetAudit {
  id        String   @id @default(uuid())
  userId    String?
  email     String
  requestIp String?
  userAgent String?
  status    String   @default("requested")
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("password_reset_audit")
  @@index([email], name: "password_reset_audit_email_idx")
  @@index([createdAt], name: "password_reset_audit_created_at_idx")
}
