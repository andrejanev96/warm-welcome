// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (for future use)
  stores    ShopifyStore[]
  campaigns Campaign[]

  @@map("users")
}

model ShopifyStore {
  id          String   @id @default(uuid())
  userId      String
  shopDomain  String   @unique
  accessToken String
  scope       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns Campaign[]

  @@map("shopify_stores")
}

model Campaign {
  id          String   @id @default(uuid())
  userId      String
  storeId     String?
  name        String
  description String?
  status      String   @default("draft") // draft, active, paused, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  store    ShopifyStore?  @relation(fields: [storeId], references: [id], onDelete: SetNull)
  triggers Trigger[]
  emails   Email[]

  @@map("campaigns")
}

model Trigger {
  id         String   @id @default(uuid())
  campaignId String
  type       String   // signup, no_activity, first_purchase, abandoned_cart, etc.
  delay      Int      @default(0) // Delay in minutes
  conditions String?    // Additional conditions as JSON string
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("triggers")
}

model EmailTemplate {
  id        String   @id @default(uuid())
  name      String
  subject   String
  body      String
  category  String?  // welcome, engagement, purchase, etc.
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  emails Email[]

  @@map("email_templates")
}

model Email {
  id          String    @id @default(uuid())
  campaignId  String
  templateId  String?
  recipientEmail String
  subject     String
  body        String
  status      String    @default("pending") // pending, sent, failed, delivered, opened, clicked
  sentAt      DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  errorMessage String?
  metadata    String?     // Additional data as JSON string
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  campaign Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  template EmailTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)

  @@map("emails")
}
